#!/bin/bash
#
# LOGS OUTPUT OF A SCRIPT IN "~/.self-logs/scripts" directory.
# Provides easy options for checking logs and failures etc.
#
# Checks if a Script is present in "SCRIPTDIR", else checks in current directory.
# Save the following alias in your ".bash_aliases" directory:
#	alias logger="bash /path/to/logger.sh"
#

SCRIPTDIR=$(dirname $0)
CURRENTDIR=`pwd`
LOGGERDIR=$HOME/.self-logs/scripts

set -o errexit
mkdir -p $LOGGERDIR

function get_script_time() {
	time_exec=$( echo "$2 - $1"|bc ); time_exec=( `echo $time_exec | tr '.' ' '` );
	if [ "x${time_exec[2]}" == x"" ] && [ "${time_exec[2]}" != "0" ]; then
		time_exec=( 0 ${time_exec[0]} );
	fi
	echo "Time Taken: ${time_exec[0]}.`echo ${time_exec[1]} | cut -b1-3` seconds"
}
function show_logs() {
	if [ "x$3" == x"" ]; then recent="5"; else recent="$3"; fi
	if [ "x$2" == x"" ] || [ "$2" == "all" ]; then script=""; else script="$2"; fi
		logfiles=`ls $LOGGERDIR/$script*.log -t 2>/dev/null | head -n +$recent`;
	echo "=======================================================================";
	for i in $logfiles; do
		bn="${i##*/}";
		if [ "`cat $i | tail -1`" == "SUCCESS" ]; then SUCCESS="SUCCESS"; else SUCCESS="FAILURE"; fi
		lf=( `echo "${SUCCESS}.${bn%.*}" | tr '.' ' '` );
		echo "${lf[0]}    `date +"%D %T" -d @${lf[2]}`    ${lf[3]}    ${lf[1]}";
	done
	echo "======================================================================="
	echo "	Total logs: `ls $LOGGERDIR/$script*.log -t 2>/dev/null | wc -l`";
}
function log_check() {
	if [ -f $LOGGERDIR/*.$2.log ]; then logfile=`ls $LOGGERDIR/*.$2.log -t 2>/dev/null | head -n +1`
	elif [ "$2" == "recent" ] || [ "x$2" == x"" ]; then logfile=`ls $LOGGERDIR/*.log -t 2>/dev/null | head -n +1`
	else echo "No such log found"; exit 1; fi
	if [ "$3" == "dump" ]; then cat $logfile; elif [ "$3" == "open" ]; then gnome-open $logfile; else echo `cat $logfile | tail -1`; fi
}
function clear_logs() {
	if [ "x$2" == x"" ] || [ "$2" == "all" ]; then script=""; else script="$2"; fi
	rm `ls $LOGGERDIR/$script*.log -t 2>/dev/null | tail -n +6`
}
function run_script() {
	# 1) quiet? 2) script *) params
	if [ "$2" == "logger" ]; then echo "Can not log logger!"; exit 1; fi
	if   [ -f $SCRIPTDIR/$2.sh  ]; then scriptfile=$SCRIPTDIR/$2.sh;
	elif [ -f $CURRENTDIR/$2.sh ]; then scriptfile=$CURRENTDIR/$2.sh;
	else echo "Could not find the script file to run"; exit 1; fi

	#cd $HOME/Downloads

	logn="$2.`date +%s`";
	logfile=$LOGGERDIR/"$logn.`echo $logn | md5sum | cut -f1 -d' ' | cut -b1-8`.log"
	params=`echo ${@:3:$(($#))}`
	time_start=$(date +%s.%N)
	if [ "$1" == "runquiet" ]; then
		. $scriptfile $params 2>&1 | tee $logfile 1>/dev/null;
		show_logs show "$2" 1
	else
		. $scriptfile $params 2>&1 | tee $logfile;
	fi
	time_end=$(date +%s.%N)
	get_script_time $time_start $time_end
	#cd $CURRENTDIR
}
case "$1" in
	run|runquiet)
		run_script "$@";
		;;
	scripts)
		ls -1 $SCRIPTDIR/*.sh | sed 's#.*/##' | sed 's/\.sh$//'
		;;
	show)
		show_logs "$@";
		;;
	log)
		log_check "$@";
		;;
	clear)
		clear_logs "$@";
		;;
	help)
echo "Logger: Logging every output.. :)
---
logs output generated by a script..
searches for a specified script in '$SCRIPTDIR' and then '$CURRENTDIR'
saves the generated output in '$LOGGERDIR'
---
	logger help
	---
		shows this help manual

	---
	logger {run|runquiet} {<script>}
	---
		runs a script (runquiet doesnt display script output on terminal, but shows SUCCESS/FAILURE message)
		<script> should be present as a .sh file.
		e.g. 'logger run updater params' will log a script defined by '$SCRIPTDIR/updater.sh' if its present.
		else will try to run '$CURRENTDIR/updater.sh' if that is present.
		The above command will also pass 'params' to the updater.sh script

	---
	logger show {<script>|all} {<numberOfLogs>|5}
	---
		show logs for recent script runs
		by default, will show recent 5 logs for all the scripts
		you can pass a particular script and number of logs to show as parameters.
		will display 'logid' in third column (useful with 'logger log' command)

	---
	logger log  {<logid>|recent} {dump|open|short}
	---
		show/open a log file logged by 'logger'
		by default shows the SUCCESS/FAILURE message for the most recent logged script
		you can pass a logid to specify a particular log.
		'dump' will display the content of log on terminal
		'open' will open the particular log in gnome
		'short' is default and will display a SUCCESS/FAILURE message, and can be ommitted.

	---
	logger scripts
	---
		displays all the scripts found in '$SCRIPTDIR'

	---
	logger clear {<script>|all}
	---
		clears log for the specified script (or all of them) except the latest 5 logged such entries.
"
		;;
	*)
		echo $"Usage:"
		echo $"	logger run     {<script>}"
		echo $"	logger log     {<logid>|recent} {dump|open|short}"
		echo $"	logger show    {<script>|all} {<numberOfLogs>|5}"
		echo $"	logger clear   {<script>|all}"
		echo $"	logger scripts"
		echo $"	logger help"
		;;
esac
